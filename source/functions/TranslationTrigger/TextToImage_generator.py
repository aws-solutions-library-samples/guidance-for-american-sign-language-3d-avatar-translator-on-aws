import boto3
import os
import json
import uuid
from TextToImage_helper import write_file_to_s3, check_image_moderation
from botocore.exceptions import ClientError

TEXT_TO_IMAGE_TOPIC_ARN = os.environ['snsTextToImageTopicArn']
MODEL_ID = "stability.stable-diffusion-xl-v1"
CONTENT_TYPE = "application/json"
HTTP_STATUS_OK = 200

sns_obj = boto3.client('sns')
aws_region = boto3.Session().region_name
bedrock_client = boto3.client(
    service_name='bedrock-runtime',
    region_name=aws_region,
    endpoint_url=f'https://bedrock-runtime.{aws_region}.amazonaws.com'
)

s3_client = boto3.client('s3', config=boto3.session.Config(signature_version='s3v4'))


def create_presigned_get(bucket_name, object_name):
    params = {
        'Bucket': bucket_name,
        'Key': object_name
    }
    try:
        response = s3_client.generate_presigned_url(
            ClientMethod='get_object',
            HttpMethod='GET',
            Params=params,
            ExpiresIn=120
        )
    except ClientError as e:
        print(e)
        return None
    return response


def generate_image(image_input_details):
    try:
        bedrock_response = run_bedrock_fm(image_input_details)
        result_url = create_presigned_get(bedrock_response["bucketname"], bedrock_response["imagename"])
        message = {
            "Action": "CHANGE_BACKGROUND",
            "Data": result_url,
            "kwargs": {
                "model": "stable diffusion"
            }
        }
        print(f"publish message to sns :: {message}")
        sns_response = sns_obj.publish(
            TopicArn=TEXT_TO_IMAGE_TOPIC_ARN,
            Message=json.dumps({'default': json.dumps(message)}),
            MessageStructure='json',
            MessageDeduplicationId=str(uuid.uuid4()),
            MessageGroupId='1'
        )
        print(sns_response)

        dictionary = {
            'download_url': result_url,
            'result': 'success',
        }

        response = {
            "statusCode": HTTP_STATUS_OK,
            'headers': {
                'Content-Type': 'application/json; charset=UTF-8'
            },
            "body": "success",
            'body': json.dumps(dictionary)
        }

    except Exception as e:
        response = {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json; charset=UTF-8'
            },
            'body': json.dumps(e)
        }

    print(f"response:: {response}")

    return response


def run_bedrock_fm(input_params):
    print('starting text2Image agent with bedrock fm using input_params {}::', input_params)
    image_name = input_params['imagename']
    response = {
        "imagename": image_name,
        "bucketname": "",
        "inputText": input_params['inputText'],
        "generateImageJobStatus": "Failed",
        "message": '',
        "encodedimage": ""
    }

    if len(input_params['inputText']) == 0:
        response["message"] = "Input text is empty."
    else:
        bedrock_response = invoke_bedrock(input_params)
        print(f"bedrock_response :: {bedrock_response}")
        parsed_response = parse_response(bedrock_response)
        if parsed_response['image_generated_status'] == 'Failed':
            response["message"] = "No image generated by bedrock API, Please check the prompt"
        else:
            img = parsed_response['image_generated']
            image_generated = write_file_to_s3(img, image_name)

            image_moderation_response = check_image_moderation(image_generated["bucket_name"],
                                                               image_generated["image_name"])
            if image_moderation_response['isToxic']:
                response["message"] = "In-appropriate image generated."
            else:
                response = {
                    "imagename": image_generated["image_name"],
                    "bucketname": image_generated["bucket_name"],
                    "inputText": input_params['inputText'],
                    "generateImageJobStatus": "Completed",
                    "message": "Image generated successfully",
                    "encodedimage": img
                }
    print(f"response :: {response}")
    return response


def parse_response(query_response):
    """Parse response and return generated image and the prompt"""

    response_dict = json.loads(query_response['body'].read())
    parsed_reponse = {
        "image_generated": '',
        "image_generated_status": 'Success'
    }
    # print(f"response_dict :: {response_dict}")
    if response_dict['artifacts'] is None:
        parsed_reponse['image_generated_status'] = 'Failed'
    else:
        parsed_reponse['image_generated'] = response_dict['artifacts'][0]["base64"]
    return parsed_reponse


def invoke_bedrock(input_params):
    input_text = input_params['inputText']
    cfg_scale = input_params['bedrockParameters']['cfg_scale']
    seed = input_params['bedrockParameters']['seed']
    steps = input_params['bedrockParameters']['steps']

    print(f"invoke foundation model with input_text :: {input_text}")

    promptTemplate = "{\"text_prompts\":[{\"text\":\"$input_text\\n\"}],\"cfg_scale\":$cfg_scale,\"seed\":$seed,\"steps\":$steps}"
    prompt = promptTemplate.replace("$input_text", input_text).replace("$cfg_scale", str(cfg_scale)).replace("$seed",
                                                                                                             str(seed)).replace(
        "$steps", str(steps))
    print(f" prompt :: {prompt}")
    print(f" MODEL_ID :: {MODEL_ID}")
    try: 
        response =  bedrock_client.invoke_model(
            modelId=MODEL_ID,
            contentType=CONTENT_TYPE,
            accept=CONTENT_TYPE,
            body=prompt
        )
    except Exception as e:
        print(e)
    
    return response
